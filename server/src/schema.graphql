type Query {
    filmsByRating: Films
    filmsByUpcoming: Films
    filmsByTrending: Films
    filmsSimilar(id: Int): Films
    filmsById(ids: [Int]): [Film]
    filmCredits(ids: [Int]): Credits
    filmsBySearchQuery(search: FilmsSearchInput): Films
    personDetails(id: Int): Person
    personFilms(id: Int): PersonFilms
}

input FilmsSearchInput {
    query: String!
    include_adult: Boolean!
    language: String
    page: Int!
}

type Films {
    page: Int!
    totalResults: Int!
    totalPages: Int!
    results: [Film!]!
}

type Film {
    id: ID!
    title: String!
    originalTitle: String
    releaseDate(format: String): String!
    posterPath: String
    genres: [Genre]
    adult: Boolean
    overview: String
    originalLanguage: String
    backdropPath: String
    popularity: Float
    voteCount: Int
    video: Boolean
    runtime: Int
    voteAverage: Float
    production: [Production]
}

type Credits {
    cast: [Credit!]!
}

type Credit {
    id: ID!
    gender: Int
    adult: Boolean
    name: String
    originalName: String
    popularity: Float
    profilePath: String
    creditId: String
}

type Person {
    id: ID!
    adult: Boolean
    birthday: String
    deathday: String
    biography: String
    name: String
    popularity: Float
    profilePath: String
    placeOfBirth: String
    imdbId: String
}

type PersonFilms{
    cast: [PersonFilmCredits!]!
}

type PersonFilmCredits {
    id: ID!
    adult: Boolean
    backdropPath: String
    deathday: String
    originalLanguage: String
    originalTitle: String
    overview: String
    popularity: Float
    posterPath: String
    releaseDate: String
    title: String
}

type Genre {
    id: Int!
    name: String
}

type Production {
    iso_3166_1: String
    name: String
}
